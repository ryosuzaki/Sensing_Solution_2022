Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
    26    133.0 MiB    133.0 MiB           1   @profile
    27                                         def detect_finger():
    28    133.0 MiB      0.0 MiB           1       mp_drawing = mp.solutions.drawing_utils
    29    133.0 MiB      0.0 MiB           1       mp_drawing_styles = mp.solutions.drawing_styles
    30    133.0 MiB      0.0 MiB           1       mp_hands = mp.solutions.hands
    31                                             
    32    133.0 MiB      0.0 MiB           1       counter=0
    33    133.0 MiB      0.0 MiB           1       img_num=128
    34    133.0 MiB      0.0 MiB           1       with serial.Serial('COM3',115200) as ser:
    35                                                 #setupが済むまで待つ
    36    132.9 MiB     -0.0 MiB         130           while ser.readline().rstrip().decode('utf-8') != "setup completed":
    37    132.9 MiB      0.0 MiB         129               continue
    38                                                 
    39    133.8 MiB      0.8 MiB           2           with mp_hands.Hands(
    40    132.9 MiB      0.0 MiB           1                   static_image_mode=False,
    41    132.9 MiB      0.0 MiB           1                   max_num_hands=1,
    42    133.8 MiB      0.0 MiB           2                   min_detection_confidence=0.5) as hands:
    43                                                     
    44                                                     #while True:
    45    201.8 MiB   -114.0 MiB          31               for i in range(30):
    46    201.8 MiB    -95.2 MiB          30                   time_sta1 = time.time()
    47                                                         
    48    201.8 MiB    -95.2 MiB          30                   img_path="D:input_images/"+str(counter)+".jpg"
    49    201.8 MiB    -95.1 MiB          30                   print(img_path)
    50                                                         #16枚分間隔を持たせる
    51    201.8 MiB    -95.1 MiB          30                   counter=(counter+1)%img_num
    52                                                         
    53    201.8 MiB    -95.1 MiB          30                   time_sta2 = time.time()
    54    201.8 MiB -3864162.1 MiB     1183170                   while cv2.imread(img_path) is None:
    55    201.8 MiB -3864041.0 MiB     1183140                       continue
    56    198.3 MiB    -99.4 MiB          30                   time_end2 = time.time()
    57                                                         
    58    198.3 MiB      0.0 MiB          30                   img = cv2.imread(img_path)
    59                                             
    60    198.3 MiB      0.0 MiB          30                   img_height, img_width, _ = img.shape
    61                                                         # Convert the BGR image to RGB before processing.
    62    201.8 MiB     30.3 MiB          30                   results = hands.process(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    63                                                 
    64    201.8 MiB    -98.7 MiB          30                   time_end1 = time.time()
    65    201.8 MiB    -98.7 MiB          30                   total_time1=time_end1- time_sta1
    66    201.8 MiB    -98.7 MiB          30                   total_time2=time_end2- time_sta2
    67                                                         
    68                                                         
    69    201.8 MiB    -98.7 MiB          30                   if results.multi_hand_landmarks is not None:
    70                                                             #print("detected")
    71    201.8 MiB    -46.1 MiB          14                       landmarks=results.multi_hand_landmarks[0].landmark
    72    201.8 MiB  -1105.4 MiB         336                       pred_x=[landmark.x*img_width for landmark in landmarks]
    73    201.8 MiB  -1105.4 MiB         336                       pred_y=[landmark.y*img_height for landmark in landmarks]
    74    201.8 MiB    -46.1 MiB          14                       ser.write(b"detected,"+(str(pred_x[8])+","+str(pred_y[8])+","+detect_color(img,pred_x,pred_y)).encode('utf-8'))
    75                                                             
    76    201.8 MiB    -46.1 MiB          14                       print("全体処理時間："+str(total_time1))
    77    201.8 MiB    -46.1 MiB          14                       print("画像読み込みち処理時間："+str(total_time2))
    78    201.8 MiB    -46.1 MiB          14                       print("AI推論時間："+str(total_time1-total_time2))
    79                                                         else:
    80    198.3 MiB    -52.7 MiB          16                       ser.write(b"not detected")
    81                                                         #print(ser.readline().rstrip().decode('utf-8'))
    82                                                         #print(ser.readline().rstrip().decode('utf-8'))